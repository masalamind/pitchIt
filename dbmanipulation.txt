# USER MODELS DEFINITION

class User(db.Model):
    __tablename__ = 'users'

    user_id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True)
    email = db.Column(db.String(64), unique=True, index=True)
    password = db.Column(db.String(255))

    votes = db.relationship('Vote', backref='user')
    pitches = db.relationship('Pitch', backref='user')
    bookmarks = db.relationship('Bookmark', backref='user')

    def __repr__(self):
        return f'User {self.username}'

new_user = User(user_id, username='my_user_name', email='my_user_email', password='my_user_password')

class PitchCategory(db.Model):
    __tablename__ = 'pitch_categories'

    category_id = db.Column(db.Integer, primary_key=True)
    category_name = db.Column(db.String(140))

    pitches = db.relationship('Pitch', backref='pitch_category')

class Pitch(db.Model):
    __tablename__ = 'pitches'

    pitch_id = db.Column(db.Integer, primary_key=True)
    publish_date = db.Column(db.DateTime)
    pitch_creator_id = db.Column(db.Integer, db.ForeignKey('users.user_id'))
    pitch_category_id = db.Column(db.Integer, db.ForeignKey('pitch_categories.category_id'))

    comments = db.relationship('Comment', backref='pitch_id')

new_pitch = Pitch(pitch_id, publish_date, pitch_creator_id='my_pitch_creator_id', pitch_category_id='my_pitch_category_id')

class Comment(db.Model):
    __tablename__ = 'comments'

    comment_id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text)
    pitch_id = db.Column(db.Integer, db.ForeignKey('pitches.pitch_id'))
    user_id = db.Column(db.Integer)
    comment_time = db.Column(db.DateTime)

new_comment = Comment(comment_id, content='my_content', pitch_id='the_pitch_id', user_id='my_user_id', comment_time)

class Bookmark(db.Model):
    __tablename__ = 'bookmarks'

    bookmark_id = db.Column(db.Integer, primary_key=True)
    pitch_id = db.Column(db.Integer, db.ForeignKey('pitches.pitch_id'))
    user_id = db.Column(db.Integer, db.ForeignKey('users.user_id'))

new_bookmark =  Bookmark(bookmark_id, pitch_id='this_pitch_id', user_id='my_user_id')

class Vote(db.Model):
    __tablename__ = 'votes'

    vote_id = db.Column(db.Integer, primary_key=True)
    upvote = db.Column(db.Boolean)
    downvote = db.Column(db.Boolean)
    pitch_id = db.Column(db.Integer, db.ForeignKey('pitches.pitch_id'))
    voter_id = db.Column(db.Integer, db.ForeignKey('users.user_id'))

new_vote = Vote(vote_id, upvote, downvote, pitch_id='this_pitch_id', voter_id='my_user_id')


# DB CREATE OPERATIONS (Crud)
_____________________________

db.create_all()
new_user = User(user_id, username='my_user_name', email='my_user_email', password='my_user_password')
new_pitch = Pitch(pitch_id, publish_date, pitch_creator_id='my_pitch_creator_id', pitch_category_id='my_pitch_category_id')
new_comment = Comment(comment_id, content='my_content', pitch_id='the_pitch_id', user_id='my_user_id', comment_time)
new_bookmark =  Bookmark(bookmark_id, pitch_id='this_pitch_id', user_id='my_user_id')
new_vote = Vote(vote_id, upvote, downvote, pitch_id='this_pitch_id', voter_id='my_user_id')



# DB READ OPERATIONS  (cRud)
____________________________
# Fetch my pitches, fetch 10 of them for a particular user
# need to get the user id of the person to whom the pitches belong

this_users_id = # need to get this particular users id
pitch_results = Pitch.query.limit(10).filter_by(pitch_creator_id='this_users_id') # returns a list of entries


# Fetch bookmarks, all available ones
# bookmarks that belong to this particular user because all bookmarks by different users are stored together but
# we retrieve those belonging to this particular user

this_users_id = # need to get this particular users id
bookmark_results = Bookmark.query.filter_by(user_id='this_users_id')

# Read number of votes for particular pitch



# DB UPDATE OPERATIONS (crUd)

# Insert new user for signup


# Insert new pitch


# Insert new comment


# Insert new Vote


# Insert new